#summary One-sentence summary of this page.

= Introduction =

The jl7 DSL (Domain Specific Language) is a scripting language which can be used to process and convert HL7 messages. It allows accessing HL7 entities (like message, segments, fields...) with a more natural language than using the Java API.

= Details =

The DSL is implemented in the package org.jl7.dsl. The entry point to the DSL capabilities is the HL7DSL class. It provides two static methods to work with HL7 messages:
* processMessage
* convertMessage

The only difference between these two methods is that convertMessage additionally creates an output message which is returned after the processing.

In the processMessage method, the provided message is to be referred to as "message". In the convertMessage method, the input message is called "message_in" and the output message is called "message_out".

Here are a few examples of how to use the DSL.

== Accessing message content ==

The following example obtains the PID segment:

{{{
println "message.PID:\n"+message.PID
}}}

If the message contains multiple PID segments, it will return the first one. In order to get the second PID segment the following syntax shall be used:

{{{
println "message.PID[2]:\n"+message.PID[2]
}}}

_Note_: The first segment has the index number 1 (not 0).

To obtain the PID-5 field from a message we can write:

{{{
println "message.PID(5):\n"+message.PID(5)
}}}

If we have a repetition of this field, the second instance of the field can be accessed by using:

{{{
println "message.PID(5)[2]:\n"+message.PID(5)[2]
}}}

This is actually the same syntax as for segments.

If the field contains multiple components we access the second component with:

{{{
println "message.PID(5)(2):\n"+message.PID(5)(2)
}}}

The same kind of syntax can be used to access subcomponents:

{{{
println "message.PID(5)[2](3)(2):\n"+message.PID(5)[2](3)(2)
}}}

So in the DSL a message has the following structure:
Message 
- Segment
  - Field
    - Component
      - Subcomponent
To go from one level to the next one, round brackets are used: xxx(n).
To access a repetition of a segment or a field, square brackets are used: xxx[n].
In both cases, the first index is 1.

== Modifying message content ==

A message can be assigned the value of another message using the operator: <<.

The following example copies the content of message_in to message_out.

{{{
message_out << message_in
}}}

A segment of one message can be added to another message. The following example copies the MSH segment from message_in to message_out.

{{{
message_out << message_in.MSH
}}}